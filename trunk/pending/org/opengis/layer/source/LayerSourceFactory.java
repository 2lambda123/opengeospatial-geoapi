/*
 * $ Id $
 * $ Source $
 * Created on Apr 4, 2005
 */
package org.opengis.layer.source;

import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.util.Map;

import org.opengis.util.InternationalString;


/**
 * The <code>LayerSourceFactory</code> class/interface...
 * 
 * @author SYS Technologies
 * @author crossley
 * @version $Revision $
 */
public interface LayerSourceFactory {

    LayerSource createLayerSource(URI provider, Map params) throws IOException;

    LayerSource createNewLayerSource(URI provider, Map params) throws IOException;
    
    /**
     * Icon representing this category of datastores.
     * <p>
     * Assumed to point to a 16x16 icon?
     * </p>
     * @return the icon.
     */
    URL getIcon();

    /**
     *  Display name used to communicate this type of FeatureStore to end users.
     * @return
     */
    InternationalString getDisplayName();
    
    /** 
     * Descrption of this type of FeatureStore.
     * @return
     */
    InternationalString getDescription();

    /**
     * DOCUMENT ME.
     * @return
     */
    Object[] getParametersInfo();

    /**
     * Indicates this FeatureStoreFactory communicate with the indicated provider or service.
     * <p>
     * This method should not fail, if a connection needs to be made
     * to parse a GetCapabilities file or negotiate WMS versions any
     * IO problems simply indicate the inabiity to process.
     * </p>
     * <p>
     * This method may be considered the same as: canProcess( provider, hints )
     * where hints was generated by using all the default values specified by the
     * getParameterInfo method.
     * </p>
     * @param provider Provider or Server of spatial information. 
     */
    boolean canProcess(URI provider);
    
    /**
     * Indicates this FeatureStoreFactory communicate with the indicated provider or service.
     * <p>
     * This method differs from canProcess in that additional configuration
     * information may be supplied. 
     * </p>
     * @param provider
     * @param params
     * @return <code>true</code> if this factory can communicate with the provider.
     */
    boolean canProcess(URI provider, Map params);

    /**
     * Allows a FeatureStoreFactory to ensure all its preconditions are met,
     * such as the presense of required libraries.
     */
    boolean isAvailable();

 
}
