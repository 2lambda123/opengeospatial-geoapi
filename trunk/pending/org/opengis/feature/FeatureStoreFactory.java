/*
 * $ Id $
 * $ Source $
 * Created on Nov 23, 2004
 */
package org.opengis.feature;

import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.util.Map;

import org.opengis.util.InternationalString;

/**
 * A provider of spatial information.
 * <p>
 * A provider, or service, implementing this API may range from a single
 * shapefile, to a complete Web Feature Server or OracleSpatial instance.
 * </p>
 * <p>
 * This API does need to consider the:
 * <ul>
 * <li>Identity: currently captured as a URI, completly defines a server
 * or provider. Usually via a URL or JDBC URL as required.
 * <li>Configuration: currently captured as a Map
 * </ul>
 * </p>
 * @author <A HREF="http://www.opengis.org">OpenGIS&reg; consortium</A>
 */
public interface FeatureStoreFactory {

    
    /**
     * Ask for a FeatureStore connecting to the indicated provider or service.
     * The returned FeatureStore may have been previously cached.
     * <p>
     * Additional hints or configuration information may be provided according
     * to the metadata indicated by getParametersInfo. This information often includes
     * security information such as username and password.
     * </p>
     * 
     * @param provider Often a URL or JDBC URL locating the serivce to connect to
     * @param params Map of hints or configuration information.
     * @return FeatureStore connected to the indicated provider or service
     * @throws IOException if the FeatureStore cannot connect to its source
     */
    FeatureStore createFeatureStore(URI provider, Map params) throws IOException;

    /**
     * Ask for a new FeatureStore connecting to the indicated provider or service.
     * <p>
     * Additional hints or configuration information may be provided according
     * to the metadata indicated by getParametersInfo. This information often includes
     * security information such as username and password.
     * </p>
     * 
     * @param provider Often a URL or JDBC URL locating the serivce to connect to
     * @param params Map of hints or configuration information.
     * @return FeatureStore Datastore connected to the newly created provider or serivce.
     * @throws IOException
     */
    FeatureStore createNewFeatureStore(URI provider, Map params) throws IOException;
    
    /**
     * Icon representing this category of <code>FeatureStore</code>s.
     * <p>
     * Assumed to point to a 16x16 icon?
     * </p>
     * 
     * @return the icon.
     */
    URL getIcon();

    /**
     *  Display name used to communicate this type of FeatureStore to end users.
     * @return
     */
    InternationalString getDisplayName();
    
    /** 
     * Descrption of this type of FeatureStore.
     * @return
     */
    InternationalString getDescription();

    /**
     * Gets an <code>Object</code> array relating to the parameters needed (beyond
     * the URI) to instantiate a <code>FeatureStore</code>.  Should be replaced
     * with a <code>Param</code>[] based on ISO standards.
     * @return
     */
    Object[] getParametersInfo();

    /**
     * Indicates this FeatureStoreFactory communicate with the indicated provider or service.
     * <p>
     * This method should not fail, if a connection needs to be made
     * to parse a GetCapabilities file or negotiate WMS versions any
     * IO problems simply indicate the inabiity to process.
     * </p>
     * <p>
     * This method may be considered the same as: canProcess( provider, hints )
     * where hints was generated by using all the default values specified by the
     * getParameterInfo method.
     * </p>
     * @param provider Provider or Server of spatial information. 
     */
    boolean canProcess(URI provider);
    
    /**
     * Indicates this FeatureStoreFactory communicate with the indicated provider or service.
     * <p>
     * This method differs from canProcess in that additional configuration
     * information may be supplied. 
     * </p>
     * @param provider
     * @param params
     * @return <code>true</code> if this factory can communicate with the provider.
     */
    boolean canProcess(URI provider, Map params);

    /**
     * Allows a FeatureStoreFactory to ensure all its preconditions are met,
     * such as the presense of required libraries.
     * @return true if available
     */
    boolean isAvailable();

}
