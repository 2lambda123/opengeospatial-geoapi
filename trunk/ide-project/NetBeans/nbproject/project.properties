#
# GeoAPI project file for NetBeans.
# This is used as an alternative to Maven projects for easier development in the NetBeans IDE.
# This configuration will create one big JAR file instead than one JAR for each module.
# This is used as a complement, not a replacement, to Maven.
#
application.title   = GeoAPI
application.vendor  = Open Geospatial Consortium
source.encoding     = UTF-8
includes            = **
excludes            =

project.root        = ../..
src.core.dir        = ${project.root}/geoapi/src/main/java
rsc.core.dir        = ${project.root}/geoapi/src/main/resources
src.pending.dir     = ${project.root}/geoapi-pending/src/main/java
src.validators.dir  = ${project.root}/geoapi-conformance/src/main/java
rsc.validators.dir  = ${project.root}/geoapi-conformance/src/main/resources
src.proj4.dir       = ${project.root}/geoapi-proj4/src/main/java
rsc.proj4.dir       = ${project.root}/geoapi-proj4/src/main/resources
src.netcdf.dir      = ${project.root}/geoapi-netcdf/src/main/java
src.examples.dir    = ${project.root}/geoapi-examples/src/main/java
src.openoffice.dir  = ${project.root}/geoapi-openoffice/src/main/java
test.core.dir       = ${project.root}/geoapi/src/test/java
test.validators.dir = ${project.root}/geoapi-conformance/src/test/java
data.validators.dir = ${project.root}/geoapi-conformance/src/test/resources
test.proj4.dir      = ${project.root}/geoapi-proj4/src/test/java
test.netcdf.dir     = ${project.root}/geoapi-netcdf/src/test/java
data.netcdf.dir     = ${project.root}/geoapi-netcdf/src/test/resources
test.examples.dir   = ${project.root}/geoapi-examples/src/test/java

#
# Version numbers for all dependencies.
# Those dependencies must exist in the local Maven repository.
# Those numbers should match the ones declared in the pom.xml files.
#
jsr275.version     = 0.9.3
vecmath.version    = 1.5.2
netcdf.version     = 4.3.10
udunits.version    = 0.2
jdom.version       = 1.1
httpclient.version = 3.1
jodatime.version   = 2.0
slf4j.version      = 1.6.4
openoffice.version = 3.2.1
junit.version      = 4.10

#
# Classpaths for compilation, execution and tests.
# The dependencies are read directy from the local Maven directory.
#
maven.repository = ${user.home}/.m2/repository

debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}
javac.classpath=\
    ${maven.repository}/javax/measure/jsr-275/${jsr275.version}/jsr-275-${jsr275.version}.jar:\
    ${maven.repository}/java3d/vecmath/${vecmath.version}/vecmath-${vecmath.version}.jar:\
    ${maven.repository}/edu/ucar/netcdf/${netcdf.version}/netcdf-${netcdf.version}.jar:\
    ${maven.repository}/edu/ucar/udunits/${udunits.version}/udunits-${udunits.version}.jar:\
    ${maven.repository}/org/openoffice/juh/${openoffice.version}/juh-${openoffice.version}.jar:\
    ${maven.repository}/org/openoffice/jurt/${openoffice.version}/jurt-${openoffice.version}.jar:\
    ${maven.repository}/org/openoffice/ridl/${openoffice.version}/ridl-${openoffice.version}.jar:\
    ${maven.repository}/org/openoffice/unoil/${openoffice.version}/unoil-${openoffice.version}.jar:\
    ${maven.repository}/junit/junit/${junit.version}/junit-${junit.version}.jar
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}:\
    ${maven.repository}/org/jdom/jdom/${jdom.version}/jdom-${jdom.version}.jar:\
    ${maven.repository}/commons-httpclient/commons-httpclient/${httpclient.version}/commons-httpclient-${httpclient.version}.jar:\
    ${maven.repository}/joda-time/joda-time/${jodatime.version}/joda-time-${jodatime.version}.jar:\
    ${maven.repository}/org/slf4j/slf4j-api/${slf4j.version}/slf4j-api-${slf4j.version}.jar:\
    ${maven.repository}/org/slf4j/slf4j-jdk14/${slf4j.version}/slf4j-jdk14-${slf4j.version}.jar
javac.processorpath=\
    ${javac.classpath}

#
# Target directories.
# Those directories is removed when the project is cleaned.
#
build.dir                   = build
build.classes.dir           = ${build.dir}/classes
build.generated.dir         = ${build.dir}/generated
build.generated.sources.dir = ${build.dir}/generated-sources
build.test.classes.dir      = ${build.dir}/test/classes
build.test.results.dir      = ${build.dir}/test/results
build.sysclasspath          = ignore
build.classes.excludes      = **/*.java,**/*.form

dist.dir         = dist
dist.jar         = ${dist.dir}/GeoAPI.jar
dist.javadoc.dir = ${dist.dir}/javadoc
mkdist.disabled  = false
no.dependencies  = true

#
# Compilation and javadoc options.
#
javac.compilerargs      =
javac.deprecation       = true
javac.source            = 1.6
javac.target            = 1.6
jar.compress            = false
jar.index               = ${jnlp.enabled}
jar.archive.disabled    = ${jnlp.enabled}
javadoc.additionalparam =
javadoc.author          = false
javadoc.encoding        = ${source.encoding}
javadoc.noindex         = false
javadoc.nonavbar        = false
javadoc.notree          = false
javadoc.private         = false
javadoc.splitindex      = false
javadoc.use             = true
javadoc.version         = false
javadoc.windowtitle     = ${application.title}

annotation.processing.enabled            = true
annotation.processing.enabled.in.editor  = false
annotation.processing.run.all.processors = true
annotation.processing.processors.list    =

jnlp.codebase.type      = no.codebase
jnlp.descriptor         = application
jnlp.enabled            = false
jnlp.mixed.code         = default
jnlp.offline-allowed    = false
jnlp.signed             = false
jnlp.signing            =
jnlp.signing.alias      =
jnlp.signing.keystore   =

#
# Execution parameters.
#
run.jvmargs        = -Xcheck:jni
main.class         = org.opengis.test.runner.Main
platform.active    = default_platform
endorsed.classpath =
