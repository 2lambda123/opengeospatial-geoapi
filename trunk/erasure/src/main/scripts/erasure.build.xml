<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- =======================================================================

     ANT BUILD FILE (Ref. http://jakarta.apache.org/ant )

     Ant script for generating a J2SE 1.4 profile of GeoAPI interfaces.
     This script is invoked by Maven 2 and should not need to be invoked
     directly. The following properties should be set by Maven 2:

     source.directory              The source directory in the module that
                                   contains J2SE 1.5 code.

     generated.source.directory    The target directory for generated sources.
     ======================================================================= -->

<project default="transform">
    <description>
        Generates a J2SE 1.4 profile of GeoAPI interfaces. This Ant script is run
        by Maven 2 and should not need to be invoked directly. This Ant script do
        not compile the source; compilation is performed by Maven 2 after sources
        generation.
    </description>

    <!-- The main target -->
    <target name="transform">
        <mkdir dir="${generatedSourceDirectory}"/>

        <!-- Copy over the files -->
        <copy todir="${generatedSourceDirectory}" overwrite="true">
            <fileset dir="${sourceDirectory}">
                <include name="org/opengis/**/*.png"        />
                <include name="org/opengis/**/*.xml"        />
                <include name="org/opengis/**/*.html"       />
                <include name="org/opengis/**/*.java"       />
                <include name="org/opengis/**/*.properties" />
                <exclude name="org/opengis/annotation/**"   />
            </fileset>
        </copy>

        <!-- Comment out annotations -->
        <replace dir="${generatedSourceDirectory}" includes="**/*.java">
            <replacefilter token="@Override"                     value="//@Override"                     />
            <replacefilter token="@UML"                          value="//@UML"                          />
            <replacefilter token="@Profile"                      value="//@Profile"                      />
            <replacefilter token="@Extension"                    value="//@Extension"                    />
            <replacefilter token="@Deprecated"                   value="//@Deprecated"                   />
            <replacefilter token="@XmlSchema"                    value="//@XmlSchema"                    />
            <replacefilter token="@XmlElement"                   value="//@XmlElement"                   />
            <replacefilter token="import static"                 value="//import static"                 />
            <replacefilter token="import org.opengis.annotation" value="//import org.opengis.annotation" />
        </replace>


        <!-- ===================================================================
             ERASE GENERIC TYPES
             
             We perform many passes with the same regular expression in order
             to resolve nested generic types. Each pass resolve only one level.
             It would have been possible to create a more complicated regular
             expression with < and > symbols included, but experience suggests
             that it leads to confusing results requirying explicit handling
             for many special cases.
             =================================================================== -->

        <!-- NOTE: we should not copy the same block of code many times! But Ant
             doesn't support loops,  and I have been unable to get <antcall/> to
             work (it tries to locate a build.xml file;  it doesn't seem to look
             in the current xml file, even if Apache's doc said that it does). -->

        <!-- Erase generic types (first pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java"/>
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;"/>
            <substitution expression="\1"/>
        </replaceregexp>

        <!-- Erase generic types (second pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java"/>
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;"/>
            <substitution expression="\1"/>
        </replaceregexp>

        <!-- Erase generic types (third pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java"/>
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;"/>
            <substitution expression="\1"/>
        </replaceregexp>

        <!-- Erase generic types (fourth pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java"/>
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;"/>
            <substitution expression="\1"/>
        </replaceregexp>




        <!-- 0. Some special cases, done file by file the good old fashioned way -->
        <!-- org.opengis.util -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/util/CodeList.java">
            <replacefilter token="(E)"/>
            <replacefilter token="final E " value="final Object "/>
        </replace>

        <!-- org.opengis.feature.type (naming) -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/Namespace.java">
            <replacefilter token="N lookup(" value="Name lookup("/>
        </replace>

        <!-- org.opengis.feature.type (model) -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/PropertyType.java">
            <!-- PropertyType is abstract and we are knocking away methods that are type narrowed later -->
            <replacefilter token="PropertyType getSuper()" value="//PropertyType getSuper()"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/OpperationType.java">
            <replacefilter token="T getTarget()" value="AttributeType getTarget()"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/OpperationDescriptor.java">
            <replacefilter token="O getType()" value="OpperationType/*T*/ getType()"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/AssociationDescriptor.java">
            <replacefilter token="A getType()" value="AssociationType getType()"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/AttributeDescriptor.java">
            <replacefilter token="T getType()" value="AttributeType getType()"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/DescriptorFactory.java">
            <replacefilter token="T type" value="AttributeType type"/>
            <replacefilter token="A type" value="AssociationType type"/>
            <replacefilter token="O type" value="OpperationType type"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/ComplexTypeBuilder.java">
            <replacefilter token="void init(T " value="void init(ComplexType "/>
            <replacefilter token="T build()"    value="ComplexType build()"   />
            <replacefilter token="E getSuper()" value="ComplexType getSuper()"/>
            <replacefilter token="setSuper(E "  value="setSuper(ComplexType " />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/FeatureCollectionTypeBuilder.java">
            <replacefilter token="void addMemberType(M " value="void addMemberType(FeatureType "/>
        </replace>



        <!-- org.opengis.feature.simple -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleFeatureTypeBuilder.java">
            <replacefilter token="E getSuper()" value="ComplexType getSuper()"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleFeatureCollectionType.java">
            <replacefilter token="M getMemberType()" value="FeatureType getMemberType()"/>
        </replace>



        <!-- org.opengis.feature.xml -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/xml/Sequence.java">
            <replacefilter token="T getType();" value="AttributeType getType();"/>
            <replacefilter token="L get()"      value="Object/*List*/ get()"    />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/xml/Choice.java">
            <replacefilter token="T getType();" value="AttributeType getType();"/>
            <replacefilter token="S get()"      value="Object/*Set*/ get()"     />
        </replace>



        <!-- org.opengis.feature -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/Attribute.java">
            <replacefilter token="T getType();" value="AttributeType getType();"/>
            <replacefilter token="B get();"     value="Object get();"           />
            <replacefilter token="void set(B "  value="void set(Object "        />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/ComplexAttribute.java">
            <replacefilter token="C get();"    value="Object/*Collection*/ get();"  />
            <replacefilter token="void set(C " value="void set(Object/*Collection*/"/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/ComplexAttributeBuilder.java">
            <replacefilter token="void setType(T " value="void setType(ComplexType "  />
            <replacefilter token="T getType()"     value="ComplexType getType()"      />
            <replacefilter token="A build("        value="ComplexAttribute build("    />
            <replacefilter token="void init(A "    value="void init(ComplexAttribute "/>
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/GeometryAttribute.java">
            <replacefilter token="G get();"    value="Object/*Geometry*/ get();"  />
            <replacefilter token="void set(G " value="void set(Object/*Geometry*/"/>
            <replacefilter token="T getType()" value="AttributeType getType()"    />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/**/*.java">
            <replacefilter token="//import org.opengis.feature.type.AttributeType;"
                           value="import org.opengis.feature.type.AttributeType;"/>
            <replacefilter token="//import org.opengis.feature.type.ComplexType;"
                           value="import org.opengis.feature.type.ComplexType;"/>
            <replacefilter token="//import java.util."
                           value="import java.util."/>
        </replace>



        <!-- ===================================================================
             TYPE NARROWING
             =================================================================== -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/Schema.java">
            <replacefilter token="Namespace&lt;TypeName&gt; keySet" value="Set keySet"/>
        </replace>



        <!-- ===================================================================
             MISCELLANEOUS
             =================================================================== -->
        <replace dir="${generatedSourceDirectory}">
            <include name="org/opengis/feature/simple/SimpleFeature.java"/>
            <include name="org/opengis/feature/simple/SimpleFeatureCollection.java"/>
            <replacefilter token="//import org.opengis.feature.type.AttributeType;"
                           value="import org.opengis.feature.type.AttributeType;"/>
            <replacefilter token="SimpleFeatureType getType();"
                           value="AttributeType/*SimpleFeautreType*/ getType();"/>
        </replace>
    </target>
</project>
